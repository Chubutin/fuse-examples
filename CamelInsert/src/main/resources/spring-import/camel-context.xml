<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- ~ Copyright (C) Red Hat, Inc. ~ http://www.redhat.com ~ ~ Licensed under 
	the Apache License, Version 2.0 (the "License"); ~ you may not use this file 
	except in compliance with the License. ~ You may obtain a copy of the License 
	at ~ ~ http://www.apache.org/licenses/LICENSE-2.0 ~ ~ Unless required by 
	applicable law or agreed to in writing, software ~ distributed under the 
	License is distributed on an "AS IS" BASIS, ~ WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. ~ See the License for the specific 
	language governing permissions and ~ limitations under the License. -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:camel="http://camel.apache.org/schema/spring" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cxf="http://camel.apache.org/schema/cxf" xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
	http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
    http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
    http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

	<bean id="sybase"
		class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="com.sybase.jdbc3.jdbc.SybDriver" />
		<property name="url" value="jdbc:sybase:Tds:11.0.1.84:4100/crm_smg" />
		<property name="username" value="crm_app" />
		<property name="password" value="sybaseep" />
	</bean>

	<bean id="mysql" class="org.apache.camel.component.sql.SqlComponent">
		<property name="dataSource" ref="sybase" />
	</bean>

	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="sybase" />
	</bean>

	<bean id="myProcessor" class="com.smg.camel.processor.DefaultProcessor" />

	<bean id="errorProcessor" class="com.smg.camel.processor.ErrorProcessor" />

	<bean id="setJSONBodyProcessor" class="com.smg.camel.processor.SetJSONBodyProcessor" />

	<bean id="helloWorldRouteBuilder" class="com.smg.camel.route.HelloWorldRouteBuilder" />

	<bean id="processorInsertSQLStatement" class="com.smg.camel.processor.ProcessorInsertSQLStatement" />

	<bean id="processorSecondInsertSQLStatement"
		class="com.smg.camel.processor.ProcessorInsertSecondSQLStatement" />

	<bean id="forcedExceptionBean" class="java.lang.IllegalArgumentException">
		<constructor-arg index="0" value="No existe ese CONTENT-TYPE" />
	</bean>

	<camel:camelContext id="helloWorldContext">

		<camel:propertyPlaceholder id="camelProperties"
			location="ref:properties" />

		<camel:onException>
			<camel:exception>java.lang.Exception</camel:exception>
			<camel:to uri="mock:error" />
			<camel:process ref="errorProcessor" />
		</camel:onException>

		<camel:route id="camelInsertMainRoute">
			<camel:from
				uri="cxfrs:bean?resourceClasses=com.smg.service.CamelInsertService&amp;bindingStyle=SimpleConsumer&amp;address={{http.address.path}}" />
			<!-- <camel:process ref="myProcessor" /> -->
			<camel:setHeader headerName="headerRouting">
				<camel:simple>direct:${header.operationName}${header.CamelHttpMethod}</camel:simple>
			</camel:setHeader>

			<camel:to uri="log:before?showHeaders=true" />
			<camel:routingSlip>
				<camel:header>headerRouting</camel:header>
			</camel:routingSlip>
			<camel:log message="Finalizacion de ruta principal"></camel:log>
		</camel:route>



		<camel:route id="taskPOSTRoute">
			<camel:from uri="direct:taskPOST" />

			<camel:choice>
				<camel:when>
					<camel:simple>${in.header.content-type} == 'application/json'</camel:simple>
					<camel:to uri="direct:processJSONPayload" />
				</camel:when>
				<camel:when>
					<camel:simple>${in.header.content-type} == 'application/xml'</camel:simple>
					<camel:to uri="direct:processXMLPayload" />
				</camel:when>
				<camel:otherwise>
					<camel:throwException ref="forcedExceptionBean" />
				</camel:otherwise>

			</camel:choice>

			<!-- ABRO LA TRANSACCION, TODO DE AQUI PARA ABAJO ESTA DENTRO DE LA TX -->
			<!-- <camel:transacted /> -->

			<camel:log message="Entro en la ruta hello world" />
			<!-- <camel:process ref="processorInsertSQLStatement" /> <camel:to uri="sql:${header.CamelSqlQuery}?dataSource=sybase" 
				/> <camel:process ref="processorSecondInsertSQLStatement" /> <camel:to uri="sql:${header.CamelSqlQuery}?dataSource=sybase" 
				/> -->
			<camel:process ref="myProcessor" />

<!-- 			<camel:to uri="http://localhost:2121/smg/" /> -->


			<camel:to uri="mock:returnHello" />
		</camel:route>

		<camel:route id="routeProcessJSON">
			<camel:from uri="direct:processJSONPayload" />
			<camel:unmarshal>
				<camel:json library="Jackson" unmarshalTypeName="java.util.Map" />
			</camel:unmarshal>
			<camel:setProperty propertyName="jsonBody">
				<camel:simple>${in.body}</camel:simple>
			</camel:setProperty>
		</camel:route>

		<camel:route id="routeprocessXML">
			<camel:from uri="direct:processXMLPayload" />
			<camel:process ref="xStreamProcessor" />
		</camel:route>


	</camel:camelContext>
	
	<bean id="xStreamProcessor" class="com.smg.camel.processor.XStreamProcessor"/>

</beans>